{"version":3,"sources":["components/Navbar.js","components/form.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","Mystyle","color","mode","backgroundColor","react_default","a","createElement","className","concat","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","dist","to","style","title","onClick","togglemode","Form","_useState","useState","_useState2","Object","slicedToArray","text","setText","_useState3","_useState4","len","setLen","htmlFor","heading","rows","value","onChange","e","target","txt","split","crt","i","length","txt_len","btn_color","toUpperCase","substring","toLowerCase","About","myTxtStyle","setMyTxtStyle","Mybtn","setMybtn","aria-labelledby","data-bs-parent","document","querySelector","querySelectorAll","forEach","innerHTML","Alert","height","alert","role","msg","App","setMode","setAlert","_useState5","c1","c2","_useState6","Colors","setColors","ShowAlert","message","setTimeout","Fragment","body","components_Alert","react_router_dist","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.3c322b84.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props){\r\n    const Mystyle={\r\n        color:props.mode === 'dark' ? 'white' : 'black',\r\n        backgroundColor: props.mode === 'dark' ? 'black' : 'white'\r\n    }\r\n    return (\r\n        <nav className={`navbar navbar-expand-sm bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <Link className={`navbar-brand`} to=\"/home\" style={\r\n                            {\r\n                                color:props.mode==='dark'?'white':'black'\r\n                            }}>{props.title}\r\n                        </Link>\r\n                        <Link className='nav-link' to='/home' style={{color:Mystyle.color}}>Home</Link>\r\n                        <Link className='nav-link' to='/about' style={{color:Mystyle.color}}>About</Link>\r\n                    </ul>\r\n                    <div className=\"form-check form-switch mx-3 my-3 navtoggle\">\r\n                        <input className=\"form-check-input mode\" type=\"checkbox\"  id=\"flexSwitchCheckChecked\" onClick={props.togglemode}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Form(props) {\r\n    const all_upper = () => {\r\n        setText(text.toUpperCase())\r\n    }\r\n    const all_lower = () => {\r\n        setText(text.toLowerCase())\r\n    }\r\n    const first_letter_upper = () => {\r\n        var a = text.split(' ')\r\n        var txt = ''\r\n        for (let i = 0; i < a.length; i++) {\r\n            if (a[i] === '') {\r\n                continue\r\n            }\r\n            else {\r\n                var e = a[i].substring(1)\r\n                e = e.toLowerCase();\r\n                a[i] = a[i][0].toUpperCase() + e\r\n                txt = txt.concat(a[i], \" \")\r\n            }\r\n        }\r\n        setText(txt)\r\n        // document.querySelector('label').innerHTML=\"Text Converted !!\"\r\n    }\r\n    const txt_len = () => {\r\n        const txt = text.split(' ')\r\n        var crt = 0\r\n        for (let i = 0; i < txt.length; i++) {\r\n            if (txt[i] === '') {\r\n                continue\r\n            }\r\n            else {\r\n                crt++\r\n            }\r\n        }\r\n        setLen(crt)\r\n    }\r\n    const handelOnChange = (e) => {\r\n        setText(e.target.value)\r\n        txt_len()\r\n    }\r\n    // console.log(txt_len);\r\n    const [text, setText] = useState('enter text here');\r\n    const [len, setLen] = useState(3);\r\n    const Mystyle={\r\n        color:props.mode === 'dark' ? 'white' : 'black',\r\n        backgroundColor: props.mode === 'dark' ? 'black' : 'white'\r\n    }\r\n    return (\r\n        <div className='container form'>\r\n            <h2>\r\n                <div className=\"mb-3 label-txt\">\r\n                    <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label\" \r\n                        style={{color:Mystyle.color}}>{props.heading}</label>\r\n                    <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"8\" value={text} onChange={handelOnChange}\r\n                        style={\r\n                            { \r\n                                color:Mystyle.color,\r\n                                backgroundColor:Mystyle.backgroundColor\r\n                            }\r\n                        }></textarea>\r\n                </div>\r\n                <button className={`btn btn-${props.btn_color} mx-1`} onClick={all_upper}>CONVERT</button>\r\n                <button className={`btn btn-${props.btn_color} mx-1`} onClick={first_letter_upper}>Convert</button>\r\n                <button className={`btn btn-${props.btn_color} mx-1`} onClick={all_lower}>convert</button>\r\n                <section className='container info' style={\r\n                    {\r\n                        color:Mystyle.color \r\n                    }\r\n                }>\r\n                    <h3>\r\n                        words:{len}\r\n                    </h3>\r\n                    <h3>\r\n                        characters:{text.length}\r\n                    </h3>\r\n                </section>\r\n            </h2>\r\n        </div>\r\n    )\r\n}\r\nForm.propTypes = {\r\n    heading: PropTypes.string,\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function About() {\r\n    const [myTxtStyle,setMyTxtStyle]=useState({\r\n        color:'black',\r\n        backgroundColor:'white',\r\n    })\r\n    const [Mybtn,setMybtn]=useState({\r\n        color:'black',\r\n        backgroundColor:'white'\r\n    })\r\n    const togglemode=()=>{\r\n        var txt=document.querySelector('.togglemode')\r\n        var txt1=document.querySelectorAll('.accordion-body')\r\n        // console.log(txt1);\r\n        txt1.forEach(e => {\r\n            if(myTxtStyle.color==='white'){\r\n                setMyTxtStyle({\r\n                    color:'black',\r\n                    backgroundColor:'white'\r\n                })\r\n            }          \r\n            else{\r\n                setMyTxtStyle({\r\n                    color:'white',\r\n                    backgroundColor:'black'\r\n                })\r\n            }\r\n            // console.log(myTxtStyle);\r\n        });\r\n        if(Mybtn.color==='black'){\r\n            setMybtn({\r\n                color:'white',\r\n                backgroundColor:'black'\r\n            })\r\n            txt.innerHTML='light mode'\r\n        }\r\n        else{\r\n            setMybtn({\r\n                color:'black',\r\n                backgroundColor:'white'\r\n            })\r\n            txt.innerHTML='dark mode'\r\n        }\r\n    }\r\n    return (\r\n        <div className='container my-5'>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myTxtStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myTxtStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myTxtStyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button className='btn btn-light my-4 togglemode' onClick={togglemode} style={Mybtn}>dark mode</button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props){\r\n    return (\r\n        <div style={\r\n            {\r\n                height:'60px'\r\n\r\n            }\r\n        }>\r\n            {props.alert &&\r\n            <div>\r\n                <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                    <strong>Success:</strong>{props.alert.msg}\r\n                </div>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\nexport default Alert","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Form from './components/form';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route\n} from \"react-router-dom\";\nimport React, { useState } from 'react'\n\nfunction App() {\n  const [mode, setMode] = useState('light')\n  const [alert, setAlert] = useState(null)\n  const [Colors, setColors] = useState({\n    c1:'black',\n    c2:'white'\n  })\n  const ShowAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1000);\n  }\n  const togglemode = () => {\n    if (mode === 'dark') {\n      setMode('light')\n      ShowAlert(\"light mode enabled\", \"info\")\n      setColors('white')\n      document.body.style.backgroundColor ='white'\n    }\n    else {\n      setMode('dark')\n      ShowAlert(\"dark mode enabled\", \"info\")\n      document.body.style.backgroundColor ='black'\n    }\n  }\n\n  return (\n    <>\n      <Router>\n        <Navbar mode={mode} title='mehul' togglemode={togglemode}/>\n        <Alert alert={alert} />\n        <Routes>\n          <Route path='/about' element={<About />} />\n          <Route path='/home' element={<Form heading='enter the text' btn_color='primary' mode={mode} color={Colors}/>}/>\n        </Routes>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}